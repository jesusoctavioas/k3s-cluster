---
- name: Import facts
  ansible.builtin.include_role:
    name: '{{ item }}'
    tasks_from: facts
  loop:
    - cloudflare
    - k3s

- name: Install Dependencies
  when: ansible_host in k3s_server_hosts
  block:
    - name: Set binary fact
      ansible.builtin.set_fact:
        binary:
          org: argoproj
          repo: argo-cd
          version: '{{ argocd_vars.argocd.version }}'
          checksums: cli_checksums.txt
          name: '{{ argocd_vars.argocd.name }}'
      run_once: true

    - name: Set checksums fact
      ansible.builtin.uri:
        url: https://github.com/{{ binary['org'] }}/{{ binary['repo'] }}/releases/download/{{ binary['version'] }}/{{ binary['checksums'] }}
        return_content: true
      register: checksums
      run_once: true

    - name: Set sha256 checksum fact
      ansible.builtin.set_fact:
        sha256_checksum: "{{ item.split(' ')[0] }}"
      loop: "{{ checksums.content.split('\n') }}"
      when: argocd_vars.argocd.name in item
      run_once: true

    - name: Install binary
      ansible.builtin.get_url:
        url: https://github.com/{{ binary['org'] }}/{{ binary['repo'] }}/releases/download/{{ binary['version'] }}/{{ binary['name'] }}
        checksum: sha256:{{ sha256_checksum }}
        dest: /usr/local/bin/argocd
        owner: root
        group: root
        mode: '0755'
      register: result
      delay: 1
      retries: 3
      until: result is not failed

    - name: Add repository
      kubernetes.core.helm_repository:
        name: '{{ argocd_vars.kubernetes.helm.repository.name }}'
        repo_url: '{{ argocd_vars.kubernetes.helm.repository.url }}'

- name: Chart Setup
  when: ansible_host == k3s_server_default_host
  block:
    - name: Set server user settings fact
      ansible.builtin.set_fact:
        server:
          admin:
            password: "{{ argocd_vars.kubernetes.server.admin.password | string | ansible.builtin.password_hash('blowfish') }}"
          user:
            name: '{{ argocd_vars.kubernetes.server.user.name }}'
            password: "{{ argocd_vars.kubernetes.server.user.password | string | ansible.builtin.password_hash('blowfish') }}"
      no_log: true
      run_once: true

    - name: Install chart
      kubernetes.core.helm:
        chart_ref: '{{ argocd_vars.kubernetes.helm.repository.name }}/{{ argocd_vars.kubernetes.helm.chart.name }}'
        chart_version: '{{ argocd_vars.kubernetes.helm.chart.version }}'
        kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
        name: '{{ argocd_vars.kubernetes.helm.chart.name }}'
        namespace: '{{ argocd_vars.kubernetes.namespace }}'
        update_repo_cache: true
        values:
          applicationSet:
            resources:
              limits:
                cpu: '{{ argocd_vars.kubernetes.application_set.resources.limits.cpu }}'
                memory: '{{ argocd_vars.kubernetes.application_set.resources.limits.memory }}'
              requests:
                cpu: '{{ argocd_vars.kubernetes.application_set.resources.requests.cpu }}'
                memory: '{{ argocd_vars.kubernetes.application_set.resources.requests.memory }}'
          configs:
            cm:
              exec.enabled: true
            params:
              application.namespaces: "{{ argocd_vars.kubernetes.server.application.namespaces | join(', ') }}"
              server.insecure: true
            secret:
              argocdServerAdminPassword: "{{ server['admin']['password'] }}"
          redis-ha:
            enabled: true
          repoServer:
            autoscaling:
              enabled: true
            resources:
              limits:
                cpu: '{{ argocd_vars.kubernetes.repo_server.resources.limits.cpu }}'
                memory: '{{ argocd_vars.kubernetes.repo_server.resources.limits.memory }}'
              requests:
                cpu: '{{ argocd_vars.kubernetes.repo_server.resources.requests.cpu }}'
                memory: '{{ argocd_vars.kubernetes.repo_server.resources.requests.memory }}'
          server:
            autoscaling:
              enabled: true
            resources:
              limits:
                cpu: '{{ argocd_vars.kubernetes.server.resources.limits.cpu }}'
                memory: '{{ argocd_vars.kubernetes.server.resources.limits.memory }}'
              requests:
                cpu: '{{ argocd_vars.kubernetes.server.resources.requests.cpu }}'
                memory: '{{ argocd_vars.kubernetes.server.resources.requests.memory }}'
        wait: true
      register: result
      delay: 1
      retries: 3
      until: result is not failed

    - name: Gateway Setup
      when: cloudflare_vars.kubernetes.gateway.domain != 'disabled'
      block:
        - name: Set hostname fact
          ansible.builtin.set_fact:
            hostname: '{{ argocd_vars.kubernetes.server.gateway.subdomain }}.{{ cloudflare_vars.kubernetes.gateway.domain }}'
          run_once: true

        - name: Set global domain
          kubernetes.core.helm:
            chart_ref: '{{ argocd_vars.kubernetes.helm.repository.name }}/{{ argocd_vars.kubernetes.helm.chart.name }}'
            chart_version: '{{ argocd_vars.kubernetes.helm.chart.version }}'
            kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
            name: '{{ argocd_vars.kubernetes.helm.chart.name }}'
            namespace: '{{ argocd_vars.kubernetes.namespace }}'
            reset_values: false
            reuse_values: true
            values:
              global:
                domain: '{{ hostname }}'
            wait: true
          register: result
          delay: 1
          retries: 3
          until: result is not failed

        - name: Create server gateway
          kubernetes.core.k8s:
            definition:
              apiVersion: gateway.networking.k8s.io/v1
              kind: Gateway
              metadata:
                annotations:
                  cert-manager.io/cluster-issuer: '{{ cloudflare_cluster_issuer }}'
                name: '{{ argocd_vars.kubernetes.server.gateway.service }}'
                namespace: '{{ argocd_vars.kubernetes.namespace }}'
              spec:
                gatewayClassName: cilium
                infrastructure:
                  annotations:
                    io.cilium/lb-ipam-ips: '{{ argocd_vars.kubernetes.server.loadbalancer.ip }}'
                listeners:
                  - allowedRoutes:
                      kinds:
                        - kind: HTTPRoute
                      namespaces:
                        from: Same
                    hostname: '{{ hostname }}'
                    name: http
                    port: 80
                    protocol: HTTP
                  - allowedRoutes:
                      kinds:
                        - kind: HTTPRoute
                      namespaces:
                        from: Same
                    hostname: '{{ hostname }}'
                    name: https
                    port: 443
                    protocol: HTTPS
                    tls:
                      certificateRefs:
                        - kind: Secret
                          name: '{{ cloudflare_vars.kubernetes.gateway.cluster.issuer.key.prefix }}-{{ argocd_vars.kubernetes.server.gateway.service }}'
            kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
            wait: true

        - name: Create http route
          kubernetes.core.k8s:
            definition:
              apiVersion: gateway.networking.k8s.io/v1beta1
              kind: HTTPRoute
              metadata:
                name: http-route-{{ argocd_vars.kubernetes.server.gateway.service }}
                namespace: '{{ argocd_vars.kubernetes.namespace }}'
              spec:
                hostnames:
                  - '{{ hostname }}'
                parentRefs:
                  - kind: Gateway
                    name: '{{ argocd_vars.kubernetes.server.gateway.service }}'
                    namespace: '{{ argocd_vars.kubernetes.namespace }}'
                    sectionName: http
                rules:
                  - filters:
                      - requestRedirect:
                          scheme: https
                          statusCode: 301
                        type: RequestRedirect
                    matches:
                      - path:
                          type: PathPrefix
                          value: /

        - name: Create https route
          kubernetes.core.k8s:
            definition:
              apiVersion: gateway.networking.k8s.io/v1beta1
              kind: HTTPRoute
              metadata:
                name: https-route-{{ argocd_vars.kubernetes.server.gateway.service }}
                namespace: '{{ argocd_vars.kubernetes.namespace }}'
              spec:
                hostnames:
                  - '{{ hostname }}'
                parentRefs:
                  - kind: Gateway
                    name: '{{ argocd_vars.kubernetes.server.gateway.service }}'
                    namespace: '{{ argocd_vars.kubernetes.namespace }}'
                    sectionName: https
                rules:
                  - backendRefs:
                      - kind: Service
                        name: '{{ argocd_vars.kubernetes.server.gateway.service }}'
                        port: 443
                    matches:
                      - path:
                          type: PathPrefix
                          value: /

    - name: Set server loadbalancer ip
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            annotations:
              io.cilium/lb-ipam-ips: '{{ argocd_vars.kubernetes.server.loadbalancer.ip }}'
            name: '{{ argocd_vars.kubernetes.server.gateway.service }}'
            namespace: '{{ argocd_vars.kubernetes.namespace }}'
          spec:
            type: LoadBalancer
        kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
      when: cloudflare_vars.kubernetes.gateway.domain == 'disabled'

    - name: Set server user name
      kubernetes.core.k8s:
        definition: "{{ lookup('ansible.builtin.template', 'user.j2') | from_yaml }}"
        kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
        wait: true

    - name: Set server user password
      kubernetes.core.k8s:
        definition: "{{ lookup('ansible.builtin.template', 'password.j2') | from_yaml }}"
        kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
        wait: true

    - name: Set server rbac policy
      kubernetes.core.k8s:
        definition: "{{ lookup('ansible.builtin.template', 'policy.j2') | from_yaml }}"
        kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
        wait: true
