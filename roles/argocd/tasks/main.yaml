---
- name: Import facts
  ansible.builtin.include_role:
    name: '{{ item }}'
    tasks_from: facts
  loop:
    - cloudflare
    - k3s

- name: Install Dependencies
  when: ansible_host in k3s_server_hosts
  block:
    - name: Set binary fact
      ansible.builtin.set_fact:
        binary:
          org: argoproj
          repo: argo-cd
          version: '{{ argocd_vars.argocd.version }}'
          checksums: cli_checksums.txt
          name: '{{ argocd_vars.argocd.name }}'
      run_once: true

    - name: Set checksums fact
      ansible.builtin.uri:
        url: https://github.com/{{ binary['org'] }}/{{ binary['repo'] }}/releases/download/{{ binary['version'] }}/{{ binary['checksums'] }}
        return_content: true
      register: checksums
      run_once: true

    - name: Set sha256 checksum fact
      ansible.builtin.set_fact:
        sha256_checksum: "{{ item.split(' ')[0] }}"
      loop: "{{ checksums.content.split('\n') }}"
      when: "'linux-arm64' in item"
      run_once: true

    - name: Install binary
      ansible.builtin.get_url:
        url: https://github.com/{{ binary['org'] }}/{{ binary['repo'] }}/releases/download/{{ binary['version'] }}/{{ binary['name'] }}
        checksum: sha256:{{ sha256_checksum }}
        dest: /usr/local/bin/argocd
        owner: root
        group: root
        mode: '0755'
      register: result
      delay: 1
      retries: 3
      until: result is not failed

    - name: Add repository
      kubernetes.core.helm_repository:
        name: '{{ argocd_vars.kubernetes.helm.repository.name }}'
        repo_url: '{{ argocd_vars.kubernetes.helm.repository.url }}'

- name: Chart Setup
  when: ansible_host == k3s_server_default_host
  block:
    - name: Install chart
      kubernetes.core.helm:
        chart_ref: '{{ argocd_vars.kubernetes.helm.repository.name }}/{{ argocd_vars.kubernetes.helm.chart.name }}'
        chart_version: '{{ argocd_vars.kubernetes.helm.chart.version }}'
        kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
        name: '{{ argocd_vars.kubernetes.helm.chart.name }}'
        namespace: '{{ argocd_vars.kubernetes.namespace }}'
        update_repo_cache: true
        values:
          applicationSet:
            replicas: 2
          configs:
            secret:
              argocdServerAdminPassword: "{{ argocd_vars.kubernetes.server.admin.password | string | ansible.builtin.password_hash('blowfish') }}"
          redis-ha:
            enabled: true
          repoServer:
            autoscaling:
              enabled: true
              minReplicas: 2
          server:
            autoscaling:
              enabled: true
              minReplicas: 2
            resources:
              limits:
                cpu: 100m
                memory: 128Mi
              requests:
                cpu: 50m
                memory: 64Mi
        wait: true
      register: result
      delay: 1
      retries: 3
      until: result is not failed

    - name: Create frontend ingress
      kubernetes.core.k8s:
        definition:
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: argo-cd-argocd-server
            namespace: '{{ argocd_vars.kubernetes.namespace }}'
            annotations:
              cert-manager.io/cluster-issuer: '{{ cloudflare_vars.kubernetes.ingress.cluster.issuer.name }}'
          spec:
            ingressClassName: cilium
            rules:
              - host: argocd.{{ cloudflare_vars.kubernetes.ingress.domain }}
                http:
                  paths:
                    - backend:
                        service:
                          name: argo-cd-argocd-server
                          port:
                            number: 80
                      path: /
                      pathType: Prefix
            tls:
              - hosts:
                  - argocd.{{ cloudflare_vars.kubernetes.ingress.domain }}
                secretName: '{{ cloudflare_vars.kubernetes.ingress.cluster.issuer.key.prefix }}-argo-cd-argocd-server'
        kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
        wait: true

    - name: Set frontend loadbalancer ip
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            annotations:
              io.cilium/lb-ipam-ips: '{{ argocd_vars.kubernetes.server.loadbalancer.ip }}'
              io.cilium/lb-ipam-sharing-key: cilium-ingress-argo-cd-argocd-server
            name: cilium-ingress-argo-cd-argocd-server
            namespace: '{{ argocd_vars.kubernetes.namespace }}'
        kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
        wait: true
