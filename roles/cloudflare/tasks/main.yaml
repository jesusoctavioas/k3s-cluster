---
- name: Import facts
  ansible.builtin.include_role:
    name: '{{ item }}'
    tasks_from: facts
  loop:
    - cilium
    - cluster
    - k3s

- name: Cloudflare Setup
  when: ansible_host == k3s_server_default_host
  block:
    - name: Create secret
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: cloudflare-api-token
            namespace: '{{ cloudflare_vars.kubernetes.namespace }}'
          stringData:
            token: '{{ cloudflare_vars.kubernetes.api.token }}'
          type: Opaque
        kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
        wait: true

    - name: Create cluster issuer
      kubernetes.core.k8s:
        definition:
          apiVersion: cert-manager.io/v1
          kind: ClusterIssuer
          metadata:
            name: '{{ cloudflare_vars.kubernetes.ingress.cluster.issuer.name }}'
          spec:
            acme:
              email: '{{ cluster_vars.mail.user.alias }}'
              privateKeySecretRef:
                name: '{{ cloudflare_vars.kubernetes.ingress.cluster.issuer.key.prefix }}-key'
              server: '{{ cloudflare_vars.kubernetes.acme.server }}'
              solvers:
                - dns01:
                    cloudflare:
                      apiTokenSecretRef:
                        key: token
                        name: cloudflare-api-token
        kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
        wait: true

    - name: Set hubble tls
      kubernetes.core.helm:
        chart_ref: '{{ cilium_vars.kubernetes.helm.repository.name }}/{{ cilium_vars.kubernetes.helm.chart.name }}'
        chart_version: '{{ cilium_vars.kubernetes.helm.chart.version }}'
        kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
        name: '{{ cilium_vars.kubernetes.helm.chart.name }}'
        namespace: '{{ cilium_vars.kubernetes.namespace }}'
        reset_values: false
        reuse_values: true
        values:
          hubble:
            tls:
              auto:
                certManagerIssuerRef:
                  group: cert-manager.io
                  kind: ClusterIssuer
                  name: '{{ cloudflare_vars.kubernetes.ingress.cluster.issuer.name }}'
                method: '{{ cilium_vars.kubernetes.hubble.tls.method }}'
        wait: true
      register: result
      delay: 1
      retries: 3
      until: result is not failed
      when: cilium_vars.kubernetes.hubble.tls.method == 'certmanager'

    - name: Create hubble ui ingress
      kubernetes.core.k8s:
        definition:
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: hubble-ui
            namespace: '{{ cilium_vars.kubernetes.namespace }}'
            annotations:
              cert-manager.io/cluster-issuer: '{{ cloudflare_vars.kubernetes.ingress.cluster.issuer.name }}'
          spec:
            ingressClassName: cilium
            rules:
              - host: hubble.{{ cloudflare_vars.kubernetes.ingress.domain }}
                http:
                  paths:
                    - backend:
                        service:
                          name: hubble-ui
                          port:
                            number: 80
                      path: /
                      pathType: Prefix
            tls:
              - hosts:
                  - hubble.{{ cloudflare_vars.kubernetes.ingress.domain }}
                secretName: '{{ cloudflare_vars.kubernetes.ingress.cluster.issuer.key.prefix }}-hubble-ui'
        kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
        wait: true

    - name: Set hubble ui loadbalancer ip
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: cilium-ingress-hubble-ui
            namespace: '{{ cilium_vars.kubernetes.namespace }}'
            annotations:
              io.cilium/lb-ipam-ips: '{{ cilium_vars.kubernetes.hubble.ui.loadbalancer.ip }}'
              io.cilium/lb-ipam-sharing-key: cilium-ingress-hubble-ui
        kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
        wait: true
