---
- name: Import facts
  ansible.builtin.include_role:
    name: '{{ item }}'
    tasks_from: facts
  loop:
    - cilium
    - cluster
    - k3s

- name: Cloudflare Setup
  when: ansible_host == k3s_server_default_host
  block:
    - name: Create secret
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: cloudflare-api-token
            namespace: kube-system
          stringData:
            token: '{{ cloudflare_vars.api.token }}'
          type: Opaque
        kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'

    - name: Create cluster issuer
      kubernetes.core.k8s:
        definition:
          apiVersion: cert-manager.io/v1
          kind: ClusterIssuer
          metadata:
            name: cloudflare-cluster-issuer
          spec:
            acme:
              email: '{{ cluster_vars.mail.user.alias }}'
              privateKeySecretRef:
                name: cloudflare-tls-key
              server: '{{ cloudflare_vars.acme.server }}'
              solvers:
                - dns01:
                    cloudflare:
                      apiTokenSecretRef:
                        key: token
                        name: cloudflare-api-token
        kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'

    - name: Set hubble tls and ingress controller
      kubernetes.core.helm:
        chart_ref: cilium/cilium
        chart_version: '{{ cilium_vars.version.chart }}'
        kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
        name: cilium
        namespace: kube-system
        reset_values: false
        reuse_values: true
        values:
          hubble:
            tls:
              auto:
                certManagerIssuerRef:
                  group: cert-manager.io
                  kind: ClusterIssuer
                  name: cloudflare-cluster-issuer
                method: certmanager
          ingressController:
            enabled: true
            loadbalancerMode: '{{ cilium_vars.ingress_controller.loadbalancer.mode }}'
            service:
              loadBalancerIP: '{{ cilium_vars.ingress_controller.loadbalancer.ip }}'
        wait: true
