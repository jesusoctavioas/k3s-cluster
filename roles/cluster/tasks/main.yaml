---
- name: Import validation tasks
  ansible.builtin.import_tasks:
    file: validation.yaml

- name: Import user tasks
  ansible.builtin.import_tasks:
    file: user.yaml

- name: Cluster Provisioning
  when: raspberry_pi | default(false)
  block:
    - name: Bluetooth Configuration
      notify: Reboot
      when: cluster_disable_service_bluetooth | default(false)
      block:
        - name: Disable bluetooth firmware
          ansible.builtin.lineinfile:
            dest: /boot/firmware/config.txt
            insertafter: '[all]'
            line: dtoverlay=disable-bt
            regexp: ^dtoverlay=disable-bt

        - name: Disable bluetooth services
          ansible.builtin.systemd_service:
            name: '{{ item }}'
            state: stopped
            enabled: false
          loop:
            - bluetooth.service
            - hciuart.service

    - name: WiFi Configuration
      notify: Reboot
      when: cluster_disable_service_wifi | default(false)
      block:
        - name: Disable wifi firmware
          ansible.builtin.lineinfile:
            dest: /boot/firmware/config.txt
            insertafter: '[all]'
            line: dtoverlay=disable-wifi
            regexp: ^dtoverlay=disable-wifi

        - name: Disable wifi service
          ansible.builtin.systemd_service:
            name: wpa_supplicant.service
            state: stopped
            enabled: false

    - name: OS Configuration
      notify: Reboot
      block:
        - name: Disable access time updates
          ansible.builtin.replace:
            path: /etc/fstab
            regexp: 'discard,errors'
            replace: 'discard,noatime,errors'

        - name: Disable cloud-init service
          ansible.builtin.file:
            path: /etc/cloud/cloud-init.disabled
            access_time: preserve
            modification_time: preserve
            state: touch
            owner: root
            group: root
            mode: '0644'

        - name: Disable firewall
          ansible.builtin.systemd_service:
            name: ufw.service
            state: stopped
            enabled: false

        - name: Set service facts
          ansible.builtin.service_facts:

        - name: Remove Snap Packages
          when:
            - ansible_facts.services['snapd.service'] is defined
            - ansible_facts.services['snapd.service'].state == 'running'
          block:
            - name: Get snap packages
              ansible.builtin.command:
                cmd: snap list
              changed_when: false
              register: snap_packages

            - name: Remove snap packages
              community.general.snap:
                name: '{{ item | split | first }}'
                state: absent
              loop: '{{ snap_packages.stdout_lines[1:] }}'
              when: snap_packages.stdout_lines[1:] is iterable

        - name: Disable snapd services
          ansible.builtin.systemd_service:
            name: '{{ item }}'
            state: stopped
            enabled: false
          loop:
            - snapd.service
            - snapd.seeded.service
            - snapd.socket

    - name: Kubernetes Configuration
      notify: Reboot
      block:
        - name: Enable cpuset and memory cgroups
          ansible.builtin.lineinfile:
            path: /boot/firmware/cmdline.txt
            line: \g<1> cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory
            regexp: ^((?!.*\bcgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory\b).*)$
            backrefs: true
          register: cmdline

        - name: Install package
          ansible.builtin.apt:
            name: linux-modules-extra-raspi
            autoremove: true
            update_cache: true

    - name: Device Configuration
      ansible.builtin.import_tasks:
        file: device.yaml

    - name: Distribution Upgrade
      ansible.builtin.import_tasks:
        file: upgrade.yaml

- name: Flush handlers
  ansible.builtin.meta: flush_handlers

- name: Trim disks
  ansible.builtin.command:
    cmd: fstrim -v /
  changed_when: command.stdout.find('trimmed') != -1
  register: command
  when: trim_disks in ['y', 'Y']
