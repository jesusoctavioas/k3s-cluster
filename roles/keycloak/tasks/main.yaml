---
- name: Import facts
  ansible.builtin.include_role:
    name: '{{ item }}'
    tasks_from: facts
  loop:
    - cloudflare
    - k3s

- name: Add repository
  kubernetes.core.helm_repository:
    name: '{{ keycloak_vars.kubernetes.helm.repository.name }}'
    repo_url: '{{ keycloak_vars.kubernetes.helm.repository.url }}'
  when: ansible_host in k3s_server_hosts

- name: Chart Setup
  when: ansible_host == k3s_server_default_host
  block:
    - name: Create secret
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: keycloak-secret
            namespace: '{{ keycloak_vars.kubernetes.namespace }}'
          stringData:
            password: '{{ keycloak_vars.kubernetes.frontend.user.password }}'
            postgres-password: '{{ keycloak_vars.kubernetes.postgresql.user.password }}'
          type: Opaque
        kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
        wait: true

    - name: Install chart
      kubernetes.core.helm:
        chart_ref: '{{ keycloak_vars.kubernetes.helm.repository.name }}/{{ keycloak_vars.kubernetes.helm.chart.name }}'
        chart_version: '{{ keycloak_vars.kubernetes.helm.chart.version }}'
        create_namespace: true
        kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
        name: '{{ keycloak_vars.kubernetes.helm.chart.name }}'
        namespace: '{{ keycloak_vars.kubernetes.namespace }}'
        update_repo_cache: true
        values:
          auth:
            adminUser: '{{ keycloak_vars.kubernetes.frontend.user.name }}'
            existingSecret: keycloak-secret
            passwordSecretKey: password
          global:
            postgresql:
              auth:
                password: '{{ keycloak_vars.kubernetes.postgresql.user.password }}'
            storageClass: longhorn
          postgresql:
            auth:
              existingSecret: keycloak-secret
          production: true
          proxy: edge
          revisionHistoryLimitCount: 3
        wait: true
      register: result
      delay: 1
      retries: 3
      until: result is not failed
