---
- name: Import facts
  ansible.builtin.include_role:
    name: '{{ item }}'
    tasks_from: facts
  loop:
    - cloudflare
    - k3s

- name: Add repository
  kubernetes.core.helm_repository:
    name: '{{ longhorn_vars.kubernetes.helm.repository.name }}'
    repo_url: '{{ longhorn_vars.kubernetes.helm.repository.url }}'
  when: ansible_host in k3s_server_hosts

- name: Chart Setup
  when: ansible_host == k3s_server_default_host
  block:
    - name: Install tainted chart
      kubernetes.core.helm:
        chart_ref: '{{ longhorn_vars.kubernetes.helm.repository.name }}/{{ longhorn_vars.kubernetes.helm.chart.name }}'
        chart_version: '{{ longhorn_vars.kubernetes.helm.chart.version }}'
        kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
        name: '{{ longhorn_vars.kubernetes.helm.chart.name }}'
        namespace: '{{ longhorn_vars.kubernetes.namespace }}'
        update_repo_cache: true
        values:
          defaultSettings:
            nodeDownPodDeletionPolicy: '{{ longhorn_vars.kubernetes.pod.deletion_policy }}'
            taintToleration: node-role.kubernetes.io/master=true:NoSchedule
          longhornDriver:
            tolerations:
              - key: node-role.kubernetes.io/master
                operator: Equal
                value: 'true'
                effect: NoSchedule
          longhornManager:
            tolerations:
              - key: node-role.kubernetes.io/master
                operator: Equal
                value: 'true'
                effect: NoSchedule
        wait: true
      register: result
      delay: 1
      retries: 3
      until: result is not failed
      when: k3s_vars.controlplane.tainted

    - name: Install non-tainted chart
      kubernetes.core.helm:
        chart_ref: '{{ longhorn_vars.kubernetes.helm.repository.name }}/{{ longhorn_vars.kubernetes.helm.chart.name }}'
        chart_version: '{{ longhorn_vars.kubernetes.helm.chart.version }}'
        kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
        name: '{{ longhorn_vars.kubernetes.helm.chart.name }}'
        namespace: '{{ longhorn_vars.kubernetes.namespace }}'
        update_repo_cache: true
        values:
          defaultSettings:
            nodeDownPodDeletionPolicy: '{{ longhorn_vars.pod.deletion_policy }}'
        wait: true
      register: result
      delay: 1
      retries: 3
      until: result is not failed
      when: not k3s_vars.controlplane.tainted

    - name: Create frontend ingress
      kubernetes.core.k8s:
        definition:
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: longhorn-frontend
            namespace: '{{ longhorn_vars.kubernetes.namespace }}'
            annotations:
              cert-manager.io/cluster-issuer: '{{ cloudflare_vars.kubernetes.ingress.cluster.issuer.name }}'
          spec:
            ingressClassName: cilium
            rules:
              - host: longhorn.{{ cloudflare_vars.kubernetes.ingress.domain }}
                http:
                  paths:
                    - backend:
                        service:
                          name: longhorn-frontend
                          port:
                            number: 80
                      path: /
                      pathType: Prefix
            tls:
              - hosts:
                  - longhorn.{{ cloudflare_vars.kubernetes.ingress.domain }}
                secretName: '{{ cloudflare_vars.kubernetes.ingress.cluster.issuer.key.prefix }}-longhorn-frontend'
        kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
        wait: true

    - name: Set frontend loadbalancer ip
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            annotations:
              io.cilium/lb-ipam-ips: '{{ longhorn_vars.kubernetes.frontend.loadbalancer.ip }}'
            name: cilium-ingress-longhorn-frontend
            namespace: '{{ longhorn_vars.kubernetes.namespace }}'
        kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
        wait: true
