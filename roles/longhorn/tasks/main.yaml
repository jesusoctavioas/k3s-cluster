---
- name: Import facts
  ansible.builtin.include_role:
    name: '{{ item }}'
    tasks_from: facts
  loop:
    - cloudflare
    - k3s

- name: Add repository
  kubernetes.core.helm_repository:
    name: '{{ longhorn_vars.kubernetes.helm.repository.name }}'
    repo_url: '{{ longhorn_vars.kubernetes.helm.repository.url }}'
  when: ansible_host in k3s_server_hosts

- name: Chart Setup
  when: ansible_host == k3s_server_default_host
  block:
    - name: Install tainted chart
      kubernetes.core.helm:
        chart_ref: '{{ longhorn_vars.kubernetes.helm.repository.name }}/{{ longhorn_vars.kubernetes.helm.chart.name }}'
        chart_version: '{{ longhorn_vars.kubernetes.helm.chart.version }}'
        kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
        name: '{{ longhorn_vars.kubernetes.helm.chart.name }}'
        namespace: '{{ longhorn_vars.kubernetes.namespace }}'
        update_repo_cache: true
        values:
          defaultSettings:
            nodeDownPodDeletionPolicy: '{{ longhorn_vars.kubernetes.pod.deletion_policy }}'
            taintToleration: node-role.kubernetes.io/master=true:NoSchedule
          longhornDriver:
            tolerations:
              - key: node-role.kubernetes.io/master
                operator: Equal
                value: 'true'
                effect: NoSchedule
          longhornManager:
            tolerations:
              - key: node-role.kubernetes.io/master
                operator: Equal
                value: 'true'
                effect: NoSchedule
        wait: true
      register: result
      delay: 1
      retries: 3
      until: result is not failed
      when: k3s_vars.controlplane.tainted

    - name: Install non-tainted chart
      kubernetes.core.helm:
        chart_ref: '{{ longhorn_vars.kubernetes.helm.repository.name }}/{{ longhorn_vars.kubernetes.helm.chart.name }}'
        chart_version: '{{ longhorn_vars.kubernetes.helm.chart.version }}'
        kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
        name: '{{ longhorn_vars.kubernetes.helm.chart.name }}'
        namespace: '{{ longhorn_vars.kubernetes.namespace }}'
        update_repo_cache: true
        values:
          defaultSettings:
            nodeDownPodDeletionPolicy: '{{ longhorn_vars.pod.deletion_policy }}'
        wait: true
      register: result
      delay: 1
      retries: 3
      until: result is not failed
      when: not k3s_vars.controlplane.tainted

    - name: Gateway Setup
      when: cloudflare_vars.kubernetes.gateway.domain != 'disabled'
      block:
        - name: Set hostname fact
          ansible.builtin.set_fact:
            hostname: '{{ longhorn_vars.kubernetes.gateway.subdomain }}.{{ cloudflare_vars.kubernetes.gateway.domain }}'
          run_once: true

        - name: Create frontend gateway
          kubernetes.core.k8s:
            definition:
              apiVersion: gateway.networking.k8s.io/v1
              kind: Gateway
              metadata:
                annotations:
                  cert-manager.io/cluster-issuer: '{{ cloudflare_cluster_issuer }}'
                name: '{{ longhorn_vars.kubernetes.gateway.service }}'
                namespace: '{{ longhorn_vars.kubernetes.namespace }}'
              spec:
                gatewayClassName: cilium
                infrastructure:
                  annotations:
                    io.cilium/lb-ipam-ips: '{{ longhorn_vars.kubernetes.frontend.loadbalancer.ip }}'
                listeners:
                  - allowedRoutes:
                      kinds:
                        - kind: HTTPRoute
                      namespaces:
                        from: Same
                    hostname: '{{ hostname }}'
                    name: http
                    port: 80
                    protocol: HTTP
                  - allowedRoutes:
                      kinds:
                        - kind: HTTPRoute
                      namespaces:
                        from: Same
                    hostname: '{{ hostname }}'
                    name: https
                    port: 443
                    protocol: HTTPS
                    tls:
                      certificateRefs:
                        - kind: Secret
                          name: '{{ cloudflare_vars.kubernetes.gateway.cluster.issuer.key.prefix }}-{{ longhorn_vars.kubernetes.gateway.service }}'
            kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
            wait: true

        - name: Create http route
          kubernetes.core.k8s:
            definition:
              apiVersion: gateway.networking.k8s.io/v1beta1
              kind: HTTPRoute
              metadata:
                name: http-route-{{ longhorn_vars.kubernetes.gateway.service }}
                namespace: '{{ longhorn_vars.kubernetes.namespace }}'
              spec:
                hostnames:
                  - '{{ hostname }}'
                parentRefs:
                  - kind: Gateway
                    name: '{{ longhorn_vars.kubernetes.gateway.service }}'
                    namespace: '{{ longhorn_vars.kubernetes.namespace }}'
                    sectionName: http
                rules:
                  - filters:
                      - requestRedirect:
                          scheme: https
                          statusCode: 301
                        type: RequestRedirect
                    matches:
                      - path:
                          type: PathPrefix
                          value: /

        - name: Create https route
          kubernetes.core.k8s:
            definition:
              apiVersion: gateway.networking.k8s.io/v1beta1
              kind: HTTPRoute
              metadata:
                name: https-route-{{ longhorn_vars.kubernetes.gateway.service }}
                namespace: '{{ longhorn_vars.kubernetes.namespace }}'
              spec:
                hostnames:
                  - '{{ hostname }}'
                parentRefs:
                  - kind: Gateway
                    name: '{{ longhorn_vars.kubernetes.gateway.service }}'
                    namespace: '{{ longhorn_vars.kubernetes.namespace }}'
                    sectionName: https
                rules:
                  - backendRefs:
                      - kind: Service
                        name: '{{ longhorn_vars.kubernetes.gateway.service }}'
                        port: 80
                    matches:
                      - path:
                          type: PathPrefix
                          value: /

    - name: Set frontend loadbalancer ip
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            annotations:
              io.cilium/lb-ipam-ips: '{{ longhorn_vars.kubernetes.frontend.loadbalancer.ip }}'
            name: '{{ longhorn_vars.kubernetes.gateway.service }}'
            namespace: '{{ longhorn_vars.kubernetes.namespace }}'
          spec:
            type: LoadBalancer
        kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
      when: cloudflare_vars.kubernetes.gateway.domain == 'disabled'
