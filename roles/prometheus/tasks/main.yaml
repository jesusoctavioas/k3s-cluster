---
- name: Import facts
  ansible.builtin.include_role:
    name: '{{ item }}'
    tasks_from: facts
  loop:
    - cilium
    - k3s

- name: Add repository
  kubernetes.core.helm_repository:
    name: prometheus
    repo_url: https://prometheus-community.github.io/helm-charts

- name: Chart Setup
  when: ansible_host == k3s_server_default_host
  block:
    - name: Create secret
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: grafana-credentials
            namespace: kube-system
          stringData:
            password: '{{ prometheus_vars.grafana.user.password }}'
            username: '{{ prometheus_vars.grafana.user.name }}'
          type: Opaque
        kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'

    - name: Install chart
      kubernetes.core.helm:
        chart_ref: prometheus/kube-prometheus-stack
        chart_version: '{{ prometheus_vars.version.chart }}'
        kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
        name: monitoring
        namespace: kube-system
        update_repo_cache: true
        values:
          alertmanager:
            alertmanagerSpec:
              replicas: 2
              storage:
                volumeClaimTemplate:
                  spec:
                    storageClassName: longhorn
                    accessModes:
                      - ReadWriteOnce
                    resources:
                      requests:
                        storage: 5Gi
            service:
              additionalPorts:
                - name: http-web-lb
                  port: 80
                  targetPort: http-web
              annotations:
                io.cilium/lb-ipam-ips: '{{ prometheus_vars.alertmanager.loadbalancer.ip }}'
                io.cilium/lb-ipam-sharing-key: monitoring-kube-prometheus-alertmanager
              type: LoadBalancer
          grafana:
            admin:
              existingSecret: grafana-credentials
              passwordKey: password
              userKey: username
            service:
              annotations:
                io.cilium/lb-ipam-ips: '{{ prometheus_vars.grafana.loadbalancer.ip }}'
                io.cilium/lb-ipam-sharing-key: monitoring-grafana
              type: LoadBalancer
          kubeControllerManager:
            endpoints: '{{ k3s_server_ips }}'
          kubeEtcd:
            endpoints: '{{ k3s_server_ips }}'
          kubeProxy:
            endpoints: '{{ k3s_server_ips }}'
          kubeScheduler:
            endpoints: '{{ k3s_server_ips }}'
          prometheus:
            prometheusSpec:
              enableAdminAPI: true
              replicaExternalLabelName: replica
              serviceMonitorSelectorNilUsesHelmValues: false
              storageSpec:
                volumeClaimTemplate:
                  spec:
                    storageClassName: longhorn
                    accessModes:
                      - ReadWriteOnce
                    resources:
                      requests:
                        storage: 50Gi
            service:
              additionalPorts:
                - name: http-web-lb
                  port: 80
                  targetPort: http-web
              annotations:
                io.cilium/lb-ipam-ips: '{{ prometheus_vars.prometheus.loadbalancer.ip }}'
                io.cilium/lb-ipam-sharing-key: monitoring-kube-prometheus-prometheus
              type: LoadBalancer
          prometheus-node-exporter:
            resources:
              limits:
                cpu: 400m
                memory: 256Mi
              requests:
                cpu: 100m
                memory: 64Mi
        wait: true

    - name: Enable prometheus metrics
      kubernetes.core.helm:
        chart_ref: cilium/cilium
        chart_version: '{{ cilium_vars.version.chart }}'
        kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
        name: cilium
        namespace: kube-system
        reset_values: false
        reuse_values: true
        values:
          dashboards:
            enabled: true
          envoy:
            prometheus:
              serviceMonitor:
                enabled: true
          hubble:
            metrics:
              dashboards:
                enabled: true
              enabled:
                - dns:query;ignoreAAAA
                - drop
                - http
                - flow
                - icmp
                - port-distribution
                - tcp
              serviceMonitor:
                enabled: true
            relay:
              prometheus:
                serviceMonitor:
                  enabled: true
          operator:
            prometheus:
              enabled: true
              serviceMonitor:
                enabled: true
          prometheus:
            enabled: true
            serviceMonitor:
              enabled: true
        wait: true
