---
- name: Import facts
  ansible.builtin.include_role:
    name: '{{ item }}'
    tasks_from: facts
  loop:
    - cilium
    - cloudflare
    - k3s

- name: Add repository
  kubernetes.core.helm_repository:
    name: '{{ prometheus_vars.kubernetes.helm.repository.name }}'
    repo_url: '{{ prometheus_vars.kubernetes.helm.repository.url }}'

- name: Chart Setup
  when: ansible_host == k3s_server_default_host
  block:
    - name: Create secret
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: grafana-credentials
            namespace: '{{ prometheus_vars.kubernetes.namespace }}'
          stringData:
            password: '{{ prometheus_vars.kubernetes.grafana.user.password }}'
            username: '{{ prometheus_vars.kubernetes.grafana.user.name }}'
          type: Opaque
        kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
        wait: true

    - name: Install chart
      kubernetes.core.helm:
        chart_ref: '{{ prometheus_vars.kubernetes.helm.repository.name }}/{{ prometheus_vars.kubernetes.helm.chart.name }}'
        chart_version: '{{ prometheus_vars.kubernetes.helm.chart.version }}'
        kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
        name: monitoring
        namespace: '{{ prometheus_vars.kubernetes.namespace }}'
        update_repo_cache: true
        values:
          alertmanager:
            alertmanagerSpec:
              replicas: 2
              storage:
                volumeClaimTemplate:
                  spec:
                    storageClassName: longhorn
                    accessModes:
                      - ReadWriteOnce
                    resources:
                      requests:
                        storage: 5Gi
          grafana:
            admin:
              existingSecret: grafana-credentials
              passwordKey: password
              userKey: username
          kubeControllerManager:
            endpoints: '{{ k3s_server_ips }}'
          kubeEtcd:
            endpoints: '{{ k3s_server_ips }}'
          kubeProxy:
            endpoints: '{{ k3s_server_ips }}'
          kubeScheduler:
            endpoints: '{{ k3s_server_ips }}'
          prometheus:
            prometheusSpec:
              enableAdminAPI: true
              replicaExternalLabelName: replica
              serviceMonitorSelectorNilUsesHelmValues: false
              storageSpec:
                volumeClaimTemplate:
                  spec:
                    storageClassName: longhorn
                    accessModes:
                      - ReadWriteOnce
                    resources:
                      requests:
                        storage: 50Gi
          prometheus-node-exporter:
            resources:
              limits:
                cpu: 400m
                memory: 256Mi
              requests:
                cpu: 100m
                memory: 64Mi
        wait: true
      register: result
      delay: 1
      retries: 3
      until: result is not failed

    - name: Create alertmanager ingress
      kubernetes.core.k8s:
        definition:
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: monitoring-kube-prometheus-alertmanager
            namespace: '{{ prometheus_vars.kubernetes.namespace }}'
            annotations:
              cert-manager.io/cluster-issuer: '{{ cloudflare_vars.kubernetes.ingress.cluster.issuer.name }}'
          spec:
            ingressClassName: cilium
            rules:
              - host: alertmanager.{{ cloudflare_vars.kubernetes.ingress.domain }}
                http:
                  paths:
                    - backend:
                        service:
                          name: monitoring-kube-prometheus-alertmanager
                          port:
                            number: 9093
                      path: /
                      pathType: Prefix
            tls:
              - hosts:
                  - alertmanager.{{ cloudflare_vars.kubernetes.ingress.domain }}
                secretName: '{{ cloudflare_vars.kubernetes.ingress.cluster.issuer.key.prefix }}-monitoring-kube-prometheus-alertmanager'
        kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
        wait: true

    - name: Set alertmanager loadbalancer ip
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            annotations:
              io.cilium/lb-ipam-ips: '{{ prometheus_vars.kubernetes.alertmanager.loadbalancer.ip }}'
              io.cilium/lb-ipam-sharing-key: cilium-ingress-monitoring-kube-prometheus-alertmanager
            name: cilium-ingress-monitoring-kube-prometheus-alertmanager
            namespace: '{{ prometheus_vars.kubernetes.namespace }}'
        kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
        wait: true

    - name: Create grafana ingress
      kubernetes.core.k8s:
        definition:
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: monitoring-grafana
            namespace: '{{ prometheus_vars.kubernetes.namespace }}'
            annotations:
              cert-manager.io/cluster-issuer: '{{ cloudflare_vars.kubernetes.ingress.cluster.issuer.name }}'
          spec:
            ingressClassName: cilium
            rules:
              - host: grafana.{{ cloudflare_vars.kubernetes.ingress.domain }}
                http:
                  paths:
                    - backend:
                        service:
                          name: monitoring-grafana
                          port:
                            number: 80
                      path: /
                      pathType: Prefix
            tls:
              - hosts:
                  - grafana.{{ cloudflare_vars.kubernetes.ingress.domain }}
                secretName: '{{ cloudflare_vars.kubernetes.ingress.cluster.issuer.key.prefix }}-monitoring-grafana'
        kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
        wait: true

    - name: Set grafana loadbalancer ip
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            annotations:
              io.cilium/lb-ipam-ips: '{{ prometheus_vars.kubernetes.grafana.loadbalancer.ip }}'
              io.cilium/lb-ipam-sharing-key: cilium-ingress-monitoring-grafana
            name: cilium-ingress-monitoring-grafana
            namespace: '{{ prometheus_vars.kubernetes.namespace }}'
        kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
        wait: true

    - name: Create prometheus ingress
      kubernetes.core.k8s:
        definition:
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: monitoring-kube-prometheus-prometheus
            namespace: '{{ prometheus_vars.kubernetes.namespace }}'
            annotations:
              cert-manager.io/cluster-issuer: '{{ cloudflare_vars.kubernetes.ingress.cluster.issuer.name }}'
          spec:
            ingressClassName: cilium
            rules:
              - host: prometheus.{{ cloudflare_vars.kubernetes.ingress.domain }}
                http:
                  paths:
                    - backend:
                        service:
                          name: monitoring-kube-prometheus-prometheus
                          port:
                            number: 9090
                      path: /
                      pathType: Prefix
            tls:
              - hosts:
                  - prometheus.{{ cloudflare_vars.kubernetes.ingress.domain }}
                secretName: '{{ cloudflare_vars.kubernetes.ingress.cluster.issuer.key.prefix }}-monitoring-kube-prometheus-prometheus'
        kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
        wait: true

    - name: Set prometheus loadbalancer ip
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            annotations:
              io.cilium/lb-ipam-ips: '{{ prometheus_vars.kubernetes.prometheus.loadbalancer.ip }}'
              io.cilium/lb-ipam-sharing-key: cilium-ingress-monitoring-kube-prometheus-prometheus
            name: cilium-ingress-monitoring-kube-prometheus-prometheus
            namespace: '{{ prometheus_vars.kubernetes.namespace }}'
        kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
        wait: true

    - name: Enable prometheus metrics
      kubernetes.core.helm:
        chart_ref: '{{ cilium_vars.kubernetes.helm.repository.name }}/{{ cilium_vars.kubernetes.helm.chart.name }}'
        chart_version: '{{ cilium_vars.kubernetes.helm.chart.version }}'
        kubeconfig: '{{ k3s_vars.directory.config }}/k3s.yaml'
        name: '{{ cilium_vars.kubernetes.helm.chart.name }}'
        namespace: '{{ cilium_vars.kubernetes.namespace }}'
        reset_values: false
        reuse_values: true
        values:
          dashboards:
            enabled: true
          envoy:
            prometheus:
              serviceMonitor:
                enabled: true
          hubble:
            metrics:
              dashboards:
                enabled: true
              enabled:
                - dns:query;ignoreAAAA
                - drop
                - http
                - flow
                - icmp
                - port-distribution
                - tcp
              serviceMonitor:
                enabled: true
            relay:
              prometheus:
                serviceMonitor:
                  enabled: true
          operator:
            prometheus:
              enabled: true
              serviceMonitor:
                enabled: true
          prometheus:
            enabled: true
            serviceMonitor:
              enabled: true
        wait: true
      register: result
      delay: 1
      retries: 3
      until: result is not failed
