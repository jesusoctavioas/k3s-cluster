---
- name: Set authorized key
  ansible.posix.authorized_key:
    key: "{{ lookup('file', lookup('env', 'HOME') + '/.ssh/id_ed25519.pub') }}"
    state: present
    user: "{{ ansible_user }}"

- name: Enable memory cgroup
  ansible.builtin.replace:
    path: /boot/cmdline.txt
    regexp: "rootwait"
    replace: "cgroup_memory=1 cgroup_enable=memory rootwait"
  changed_when: cmdline.changed
  failed_when: cmdline.rc > 0
  notify: Perform reboot
  register: cmdline

- name: Upgrade all packages
  ansible.builtin.apt:
    update_cache: true
    upgrade: dist

- name: Remove no longer required dependencies
  ansible.builtin.apt:
    autoremove: true

- name: Disable bluetooth and wifi services
  ansible.builtin.systemd:
    enabled: false
    name: "{{ item }}.service"
  with_items:
    - bluetooth
    - hciuart
    - wpa_supplicant

- name: Boot from USB if available
  ansible.builtin.command: raspi-config nonint do_boot_behaviour B2
  changed_when: false
  failed_when: boot_behaviour.rc > 0
  register: boot_behaviour

- name: Wait for network connection on boot
  ansible.builtin.command: raspi-config nonint do_boot_wait 0
  changed_when: false
  failed_when: boot_wait.rc > 0
  register: boot_wait

- name: Update bootloader firmware
  ansible.builtin.command: rpi-eeprom-update -ad
  changed_when: eeprom_update.stdout.find('updates pending') != -1
  failed_when: eeprom_update.rc > 0
  notify: Perform reboot
  register: eeprom_update

- name: Check reboot status
  ansible.builtin.stat:
    path: /var/run/reboot-required
    get_checksum: false
  changed_when: reboot.stat.exists
  failed_when: false
  notify: Perform reboot
  register: reboot
